// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/prodsub/pb/gen"
	mock "github.com/stretchr/testify/mock"
)

// SubscriptionServiceServer is an autogenerated mock type for the SubscriptionServiceServer type
type SubscriptionServiceServer struct {
	mock.Mock
}

// CreateSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionServiceServer) CreateSubscription(_a0 context.Context, _a1 *gen.SubscriptionCreateRequest) (*gen.SubscriptionCreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 *gen.SubscriptionCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SubscriptionCreateRequest) (*gen.SubscriptionCreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SubscriptionCreateRequest) *gen.SubscriptionCreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SubscriptionCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.SubscriptionCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionServiceServer) DeleteSubscription(_a0 context.Context, _a1 *gen.SubscriptionDeleteRequest) (*gen.SubscriptionDeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 *gen.SubscriptionDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SubscriptionDeleteRequest) (*gen.SubscriptionDeleteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SubscriptionDeleteRequest) *gen.SubscriptionDeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SubscriptionDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.SubscriptionDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionServiceServer) GetSubscription(_a0 context.Context, _a1 *gen.SubscriptionGetRequest) (*gen.SubscriptionGetResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscription")
	}

	var r0 *gen.SubscriptionGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SubscriptionGetRequest) (*gen.SubscriptionGetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SubscriptionGetRequest) *gen.SubscriptionGetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SubscriptionGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.SubscriptionGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionServiceServer) ListSubscription(_a0 context.Context, _a1 *gen.SubscriptionListRequest) (*gen.SubscriptionListResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscription")
	}

	var r0 *gen.SubscriptionListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SubscriptionListRequest) (*gen.SubscriptionListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SubscriptionListRequest) *gen.SubscriptionListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SubscriptionListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.SubscriptionListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionServiceServer) UpdateSubscription(_a0 context.Context, _a1 *gen.SubscriptionUpdateRequest) (*gen.SubscriptionUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscription")
	}

	var r0 *gen.SubscriptionUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SubscriptionUpdateRequest) (*gen.SubscriptionUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.SubscriptionUpdateRequest) *gen.SubscriptionUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.SubscriptionUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.SubscriptionUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedSubscriptionServiceServer provides a mock function with given fields:
func (_m *SubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {
	_m.Called()
}

// NewSubscriptionServiceServer creates a new instance of SubscriptionServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionServiceServer {
	mock := &SubscriptionServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
