// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/prodsub/pb/gen"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ProductServiceClient is an autogenerated mock type for the ProductServiceClient type
type ProductServiceClient struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: ctx, in, opts
func (_m *ProductServiceClient) CreateProduct(ctx context.Context, in *gen.ProductCreateRequest, opts ...grpc.CallOption) (*gen.ProductCreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *gen.ProductCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductCreateRequest, ...grpc.CallOption) (*gen.ProductCreateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductCreateRequest, ...grpc.CallOption) *gen.ProductCreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ProductCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ProductCreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: ctx, in, opts
func (_m *ProductServiceClient) DeleteProduct(ctx context.Context, in *gen.ProductDeleteRequest, opts ...grpc.CallOption) (*gen.ProductDeleteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 *gen.ProductDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductDeleteRequest, ...grpc.CallOption) (*gen.ProductDeleteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductDeleteRequest, ...grpc.CallOption) *gen.ProductDeleteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ProductDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ProductDeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: ctx, in, opts
func (_m *ProductServiceClient) GetProduct(ctx context.Context, in *gen.ProductGetRequest, opts ...grpc.CallOption) (*gen.ProductGetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 *gen.ProductGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductGetRequest, ...grpc.CallOption) (*gen.ProductGetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductGetRequest, ...grpc.CallOption) *gen.ProductGetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ProductGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ProductGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProduct provides a mock function with given fields: ctx, in, opts
func (_m *ProductServiceClient) ListProduct(ctx context.Context, in *gen.ProductListRequest, opts ...grpc.CallOption) (*gen.ProductListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProduct")
	}

	var r0 *gen.ProductListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductListRequest, ...grpc.CallOption) (*gen.ProductListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductListRequest, ...grpc.CallOption) *gen.ProductListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ProductListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ProductListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: ctx, in, opts
func (_m *ProductServiceClient) UpdateProduct(ctx context.Context, in *gen.ProductUpdateRequest, opts ...grpc.CallOption) (*gen.ProductUpdateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *gen.ProductUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductUpdateRequest, ...grpc.CallOption) (*gen.ProductUpdateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductUpdateRequest, ...grpc.CallOption) *gen.ProductUpdateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ProductUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ProductUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductServiceClient creates a new instance of ProductServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductServiceClient {
	mock := &ProductServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
