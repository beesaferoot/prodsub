// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/prodsub/pb/gen"
	mock "github.com/stretchr/testify/mock"
)

// ProductServiceServer is an autogenerated mock type for the ProductServiceServer type
type ProductServiceServer struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductServiceServer) CreateProduct(_a0 context.Context, _a1 *gen.ProductCreateRequest) (*gen.ProductCreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *gen.ProductCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductCreateRequest) (*gen.ProductCreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductCreateRequest) *gen.ProductCreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ProductCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ProductCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductServiceServer) DeleteProduct(_a0 context.Context, _a1 *gen.ProductDeleteRequest) (*gen.ProductDeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 *gen.ProductDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductDeleteRequest) (*gen.ProductDeleteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductDeleteRequest) *gen.ProductDeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ProductDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ProductDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductServiceServer) GetProduct(_a0 context.Context, _a1 *gen.ProductGetRequest) (*gen.ProductGetResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 *gen.ProductGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductGetRequest) (*gen.ProductGetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductGetRequest) *gen.ProductGetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ProductGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ProductGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductServiceServer) ListProduct(_a0 context.Context, _a1 *gen.ProductListRequest) (*gen.ProductListResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListProduct")
	}

	var r0 *gen.ProductListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductListRequest) (*gen.ProductListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductListRequest) *gen.ProductListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ProductListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ProductListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductServiceServer) UpdateProduct(_a0 context.Context, _a1 *gen.ProductUpdateRequest) (*gen.ProductUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *gen.ProductUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductUpdateRequest) (*gen.ProductUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ProductUpdateRequest) *gen.ProductUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ProductUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ProductUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedProductServiceServer provides a mock function with given fields:
func (_m *ProductServiceServer) mustEmbedUnimplementedProductServiceServer() {
	_m.Called()
}

// NewProductServiceServer creates a new instance of ProductServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductServiceServer {
	mock := &ProductServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
