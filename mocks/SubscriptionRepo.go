// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	db "github.com/prodsub/pkg/db"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// SubscriptionRepo is an autogenerated mock type for the SubscriptionRepo type
type SubscriptionRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *SubscriptionRepo) Create(_a0 *db.Subscription) (*db.Subscription, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *db.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.Subscription) (*db.Subscription, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*db.Subscription) *db.Subscription); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.Subscription) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *SubscriptionRepo) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *SubscriptionRepo) Get(id uuid.UUID) (*db.Subscription, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *db.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*db.Subscription, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *db.Subscription); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: productId
func (_m *SubscriptionRepo) List(productId uuid.UUID) ([]db.Subscription, error) {
	ret := _m.Called(productId)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []db.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]db.Subscription, error)); ok {
		return rf(productId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []db.Subscription); ok {
		r0 = rf(productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, req
func (_m *SubscriptionRepo) Update(id uuid.UUID, req db.SubscriptionUpdateRequest) (*db.Subscription, error) {
	ret := _m.Called(id, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *db.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, db.SubscriptionUpdateRequest) (*db.Subscription, error)); ok {
		return rf(id, req)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, db.SubscriptionUpdateRequest) *db.Subscription); ok {
		r0 = rf(id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, db.SubscriptionUpdateRequest) error); ok {
		r1 = rf(id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSubscriptionRepo creates a new instance of SubscriptionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionRepo {
	mock := &SubscriptionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
